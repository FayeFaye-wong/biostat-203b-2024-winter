---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 26, 2024 @ 11:59PM
author: Feiyang Huang, UID 306148942
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2. Create a **private** repository `biostat-203b-2024-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `jonathanhori` and `jasenzhang1` for Lec 80) as your collaborators with write permission.

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4. After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v2.2](https://physionet.org/content/mimiciv/2.2/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Answer:** I completed the CITI training on Jan 12, 2024. The completion report is available at [here](https://www.citiprogram.org/verify/?k48ee8363-a80c-4d3c-87ab-cfb93ec1fb8a-60470277) The completion certificate is available at [here](https://www.citiprogram.org/verify/?w11ca5925-97f6-439b-954c-b23cfd27dbb4-60470277).

## Q3. Linux Shell Commands

1. Make the MIMIC v2.2 data available at location `~/mimic`. 
```{bash}
#| eval: false
ls -l ~/mimic/
```
Refer to the documentation <https://physionet.org/content/mimiciv/2.2/> for details of data files. Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises. 

  Use Bash commands to answer following questions.

**Answer:** I downloaded the MIMIC-iv-2.2 to my local machine and unzipped the file. The data file are available at `/Users/huangfeifei/Documents/203B/mimic'`. The data files are not put into Git and not copied into my directory. The gz files are not decompressed. 
```{bash}
ls -l /Users/huangfeifei/Documents/203B/mimic
```
2. Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

**Answer:** The data files are distributed as `.csv.gz` files instead of `.csv` files because the `.csv.gz` files are compressed and take less space and use less internet bandwidth. The `.csv.gz` files are compressed using gzip. The gzip is a file format and a software application used for file compression and decompress.

This is content of the `hospital` folder:
```{bash}
ls -l /Users/huangfeifei/Documents/203B/mimic/hosp
```

This is content of the `icu` folder:
```{bash}
ls -l /Users/huangfeifei/Documents/203B/mimic/icu
```
3. Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.
**Answer:** The `zcat` command is used to display the contents of a compressed file without actually uncompressing. The `zless` command is used to view the contents of a compressed file one screen at a time. The `zmore` command is used to view the contents of a compressed file one screen at a time. The `zgrep` command is used to search the contents of a compressed file for a string of characters.

4. (Looping in Bash) What's the output of the following bash script?
```{bash}
for datafile in /Users/huangfeifei/Documents/203B/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```
Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)
```{bash}
for datafile in /Users/huangfeifei/Documents/203B/mimic/hosp/{a,l,pa}*.gz
do
zcat < $datafile | wc -l $datafile
done
```

5. Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

**Answer:** The first few lines of `admissions.csv.gz` are:
```{bash}
zcat < /Users/huangfeifei/Documents/203B/mimic/hosp/admissions.csv.gz | awk -F, 'NR<=10 {print}'
```
There are 431,232 rows in this data file. 
```{bash}
zcat < /Users/huangfeifei/Documents/203B/mimic/hosp/admissions.csv.gz | wc -l
```
There are 180,733 unique patients in this data file.
```{bash}
zcat < /Users/huangfeifei/Documents/203B/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F, '{print $1}'  | uniq | wc -l
```
The number of rows in the `patients.csv.gz` file is 299,713.
```{bash}
zcat < /Users/huangfeifei/Documents/203B/mimic/hosp/patients.csv.gz | wc -l
```
The number of patients listed in the `patients.csv.gz` file is 299,712. The number of patients listed in the `patients.csv.gz` file matches the number of unique patients in the `admissions.csv.gz` file.
```{bash}
zcat < /Users/huangfeifei/Documents/203B/mimic/hosp/patients.csv.gz | tail -n +2 | awk -F, '{print $1}'  | uniq | wc -l
```

6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on; skip the header line.)

**Answer:** The possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity` are:
```{bash}
zcat < /Users/huangfeifei/Documents/203B/mimic/hosp/admissions.csv.gz | awk -F, 'NR > 1 {print $6}' | sort   | uniq -c
```
```{bash}
zcat < /Users/huangfeifei/Documents/203B/mimic/hosp/admissions.csv.gz | awk -F, 'NR > 1 {print $8}' | sort | uniq -c
```
```{bash}
zcat < /Users/huangfeifei/Documents/203B/mimic/hosp/admissions.csv.gz | awk -F, 'NR > 1 {print $10}' | sort | uniq -c
```

```{bash}
zcat < /Users/huangfeifei/Documents/203B/mimic/hosp/admissions.csv.gz | awk -F, 'NR > 1 {print $13}' | sort | uniq -c
```


7. _To compress, or not to compress. That's the question._ Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)
**Answer:** 
```{bash}
gzip -dk < /Users/huangfeifei/Documents/203B/mimic/hosp/labevents.csv.gz > /Users/huangfeifei/Documents/203B/mimic/hosp/labevents.csv
```

```{bash}
time zcat < /Users/huangfeifei/Documents/203B/mimic/hosp/labevents.csv.gz | wc -l
```
```{bash}
time wc -l /Users/huangfeifei/Documents/203B/mimic/hosp/labevents.csv| wc -l
```

The running time of `zcat < ~/mimic/labevents.csv.gz | wc -l` is 0m19.117s The running time of `wc -l labevents.csv` is 0m8.164s. The compressed gz file size is 1.94G. The uncompressed file size is 13.73G. The trade off between storage and speed for big data files is that the compressed gz file size is smaller than the uncompressed file size, but the running time of `zcat < ~/mimic/labevents.csv.gz | wc -l` is longer than the running time of `wc -l labevents.csv`.

## Q4. Who's popular in Price and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 
```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```
Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.
```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  # some bash commands here
done
```

**Answer:** The `wget -nc` command is used to download the file from the website. The `-nc` option is used to not download the file if it is already downloaded. 

```{bash}
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```

```{bash}
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  zgrep -o $char pg42671.txt | wc -l
done
```


2. What's the difference between the following two commands?
```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```

**Answer:** The first command `echo 'hello, world' > test1.txt` will create a new file `test1.txt` and write the string `hello, world` to the file. The second command `echo 'hello, world' >> test2.txt` will append the string `hello, world` to the file `test2.txt`.

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:
```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```
Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: false
./middle.sh pg42671.txt 20 5
```
**Answer:** I used `vi` to type the following and saved the file as `middle.sh`
```{bash}
chmod u+x middle.sh
```
```{bash}
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?
Here the output is the lines starting from line 20 and includes the following 5 lines of the file `pg42671.txt`. The `"$1"` is the first argument, which is the file name. The `"$2"` is the second argument, which is the end line. `"tail -n "$3"`: This command takes the output from the previous head command and retrieves the last `"$3"` lines. The variable `"$3"` represents the third argument passed to the script, which is the number of lines to select.


## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2024`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

**Answer:** 
```{bash}   
cal
```
This shows the calendar for the current month.
```{bash}
cal 2024
```
This shows the calendar for the year 2024.
```{bash}
cal 9 1752
```
This shows the calendar for the month September in the year 1752. The calendar for the month September in the year 1752 is unusual because the calendar for the month September in the year 1752 is missing 11 days. The calendar for the month September in the year 1752 is missing 11 days because the Gregorian calendar was adopted in the year 1752.
```{bash}
date
```
This shows the current date and time.
```{bash}
hostname
```
This shows the name of the computer.
```{bash}
arch
```
This shows the architecture of the system's processor or CPU.
```{bash}
uname -a 
```
This shows comprehensive output that includes the following information: Kernel name, Network node hostname, Kernel release, Kernel version, Machine hardware name, Processor type, Hardware platform, Operating system.
```{bash}
uptime
```
This shows the current time, how long the system has been running, how many users are currently logged on, and the system load averages for the past 1, 5, and 15 minutes.
```{bash}
who am i
```
This shows the username of the current user who is executing the command and current time.
```{bash}
who
```
This shows more detailed information about the users who are currently logged into the system. It displays a list of all logged-in users, their terminal or device, and login time.
```{bash}
w
```
Information about the currently logged-in users and their activities on a system. It provides a detailed overview of each user's login session, including their username, terminal or device, login time, idle time.
```{bash}
id
```
This shows the user and group information for the current user.
```{bash}
last | head
```
This shows the list of last logged in users. The `head` command is used to display the first 10 lines of the output.
```{bash}
echo {con,pre}{sent,fer}{s,ed}
```
This shows expansion of the curly brace notation, which generates a combination of words based on the provided options.
```{bash}
time sleep 5
```
This shows the time it takes to execute the command `sleep 5`. The `sleep 5` command is used to pause the execution of the command for 5 seconds.
```{bash}
history | tail
```
This shows the last 10 commands that were executed. The `tail` command is used to display the last 10 lines of the output.

## Q6. Book

1. Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book _Reproducible Research with R and RStudio_ to your local machine. 

2. Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` but not `pdf_book`.)

The point of this exercise is (1) to get the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.
<p align="center">
  <img src="/Users/huangfeifei/Desktop/section415.png" height="450">
</p>